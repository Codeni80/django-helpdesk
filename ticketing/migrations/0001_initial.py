# Generated by Django 2.2.5 on 2020-01-15 21:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('force_change', models.BooleanField(default=True, verbose_name='Force Password Change on Next Login')),
                ('u_name', models.CharField(max_length=150, verbose_name='Customer Name')),
                ('u_phone', models.CharField(max_length=14, verbose_name='Customer Phone Number')),
                ('u_permission_level', models.CharField(choices=[('1', 'User'), ('2', 'Technician')], max_length=11, verbose_name='Permission Level')),
                ('u_sort_type', models.CharField(blank=True, default='-pk', max_length=30, null=True, verbose_name='Sort By Value')),
                ('u_filter_type', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Filter By Value')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='PrinterList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('printer', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Rooms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('t_opened', models.DateTimeField(auto_now_add=True, verbose_name='Date Opened')),
                ('t_subject', models.CharField(max_length=100, verbose_name='Subject')),
                ('t_closed', models.DateTimeField(blank=True, null=True, verbose_name='Date Closed')),
                ('days_opened', models.TextField(blank=True, null=True, verbose_name='Days Open')),
                ('c_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer', to=settings.AUTH_USER_MODEL, verbose_name='Customer Name')),
                ('t_assigned', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='technician', to=settings.AUTH_USER_MODEL, verbose_name='Assigned Technician')),
                ('t_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Category', verbose_name='Category')),
                ('t_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Status', verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingLoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locations', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_name', models.CharField(max_length=255, verbose_name='Employee Name')),
                ('date', models.DateTimeField(verbose_name='Proposed Date for Training')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.TrainingLoc')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
                ('training_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.TrainingType')),
            ],
        ),
        migrations.CreateModel(
            name='Printers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem', models.TextField(verbose_name='Issue With Printer')),
                ('printer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.PrinterList')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Staff Name')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.AccountType')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='NewStaff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('department', models.CharField(max_length=255, verbose_name='Department')),
                ('supervisor', models.CharField(max_length=255, verbose_name='Supervisor')),
                ('empid', models.CharField(max_length=255, verbose_name='Employee ID')),
                ('start_date', models.DateTimeField()),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='LaptopCheckout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('reason', models.TextField(verbose_name='Reason')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentSetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.TextField(verbose_name='Date of Event')),
                ('start_time', models.TextField(verbose_name='Time of Event')),
                ('end_time', models.TextField(verbose_name='Approx End of Event')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Rooms')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='DefaultTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(verbose_name='Ticket Summary')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(verbose_name='Body')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('is_private', models.BooleanField(default=False, verbose_name='Private Comment')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Ticket')),
            ],
        ),
    ]
